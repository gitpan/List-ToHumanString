NAME
    List::ToHumanString - write lists in strings like a human would

SYNOPSIS
        use List::ToHumanString;

        printf "Report(s) for %s.\n", to_human_string qw/March May June August/;
        ## prints: Report(s) for March, May, June, and August.

        printf "Report(s) for %s.\n", to_human_string qw/March May/;
        ## prints: Report(s) for March and May.

        printf "Report(s) for %s.\n", to_human_string qw/March/;
        ## prints: Report(s) for March.


        # Exact same thing, but with less typing, by exporting humanize or even h
        use List::ToHumanString qw/h humanize/;

        printf "Report(s) for %s.\n", humanize qw/March May June August/;
        ## prints: Report(s) for March, May, June, and August.

        printf "Report(s) for %s.\n", h qw/March May/;
        ## prints: Report(s) for March and May.


        # You can also use a simple ref-deref trick to interpolate the
        # results inside the strings:
        my $output = "Report(s) for ${\ to_human_string @items }.\n";

EXPORTS BY DEFAULT
  "to_human_string"
        use List::ToHumanString;

        printf "Report(s) for %s.\n", to_human_string qw/March May June August/;
        ## prints: Report(s) for March, May, June, and August.

    Exported by default. Takes a list of items as an argument. REMOVES ALL
    UNDEFS AND EMPTY AND BLANK STRING, then returns a string. The string
    format will be as follows (number of arguments below is the number of
    arguments AFTER all undefs and blanks have been removed):

   empty list as argument
        to_human_string();
        # returns ''

    Returns empty string.

   1-item list as argument
        to_human_string('foo');
        # returns 'foo'

        to_human_string( URI->new("http://example.com") );
        # returns 'http://example.com'

    Returns the argument (stringified).

   2-item list as argument
        to_human_string('foo', 'bar');
        # returns 'foo and bar'

    Returns the two arguments joined with ' and '

   list with 3 or more items as argument
        to_human_string('foo', 'bar', 'ber', 'baz');
        # returns 'foo, bar, ber, and baz'

        $List::ToHumanString::Extra_Comma = 0;
        to_human_string('foo', 'bar', 'ber', 'baz');
        # returns 'foo, bar, ber and baz'

    Returns a string with arguments joined with ', ' (comma and space). The
    last element is also preceeded by word 'and '. Note: depending on your
    stylistic preference, you might wish not to have a comma before the last
    element. You can accomplish that by setting
    $List::ToHumanString::Extra_Comma to zero.

OPTIONAL EXPORTS
        use List::ToHumanString qw/h humanize/;

        printf "Report(s) for %s.\n", humanize qw/March May June August/;
        ## prints: Report(s) for March, May, June, and August.

        printf "Report(s) for %s.\n", h qw/March May/;
        ## prints: Report(s) for March and May.

  "humanize"
        printf "Report(s) for %s.\n", humanize qw/March May June August/;

    You can optionally import "humanize()" and use it instead of
    "to_human_string()", to save on typing.

  "h"
        printf "Report(s) for %s.\n", h qw/March May June August/;

    You can optionally import "h()" and use it instead of
    "to_human_string()", to save on typing.

AUTHOR
    Zoffix Znet, "<zoffix at cpan.org>"

BUGS
    Please report any bugs or feature requests to "bug-list-tohumanstring at
    rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=List-ToHumanString>. I
    will be notified, and then you'll automatically be notified of progress
    on your bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc List::ToHumanString

    You can also look for information at:

    *   RT: CPAN's request tracker (report bugs here)

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=List-ToHumanString>

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/List-ToHumanString>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/List-ToHumanString>

    *   Search CPAN

        <http://search.cpan.org/dist/List-ToHumanString/>

LICENSE AND COPYRIGHT
    Copyright 2013 Zoffix Znet.

    This program is free software; you can redistribute it and/or modify it
    under the terms of the the Artistic License (2.0). You may obtain a copy
    of the full license at:

    <http://www.perlfoundation.org/artistic_license_2_0>

    Any use, modification, and distribution of the Standard or Modified
    Versions is governed by this Artistic License. By using, modifying or
    distributing the Package, you accept this license. Do not use, modify,
    or distribute the Package, if you do not accept this license.

    If your Modified Version has been derived from a Modified Version made
    by someone other than you, you are nevertheless required to ensure that
    your Modified Version complies with the requirements of this license.

    This license does not grant you the right to use any trademark, service
    mark, tradename, or logo of the Copyright Holder.

    This license includes the non-exclusive, worldwide, free-of-charge
    patent license to make, have made, use, offer to sell, sell, import and
    otherwise transfer the Package with respect to any patent claims
    licensable by the Copyright Holder that are necessarily infringed by the
    Package. If you institute patent litigation (including a cross-claim or
    counterclaim) against any party alleging that the Package constitutes
    direct or contributory patent infringement, then this Artistic License
    to you shall terminate on the date that such litigation is filed.

    Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
    AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
    THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY
    YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
    CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

